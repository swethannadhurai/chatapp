import cloudinary from "../lib/cloudinary.js";
import { generateToken } from "../lib/util.js";
import User from "../models/usermodel.js";
import bcrypt from "bcryptjs";

export const signup = async (req,res)=> {
    const {email, password, fullName} = req.body;
    try {
        if(!email || !password || !fullName){
            return res.status(400).json({message:"All fields are required"});
        }

        if(password.length < 6){
            return res.status(400).json({mesaage:"Password must be atleast 6 characters"});
        }

        const user = await User.findOne({email});

        if(user){
            return res.status(400).json({message:"Email already exists"});
        }

        const salt = await bcrypt.genSalt(10);// generate random string then use it to hash password, means  even if two users have same password their hashed password will be different
        //10 means how many rounds of processing the data
        const hashedPassword = await bcrypt.hash(password, salt);

        const newUser = new User({
            fullName,
            email,
            password:hashedPassword,
        })

        if(newUser){
            generateToken(newUser._id, res);// newUser._id is generated by mongoDB automatically
            await newUser.save();//

            return res.status(201).json({
                _id: newUser._id,
                fullName: newUser.fullName,
                email: newUser.email,
                profilePic: newUser.profilePic,
            })

        }
        else{
            return res.status(400).json({message: "Invalid user data"});
        }
        
    } catch (error) {
        console.log("Error in signup:", error.message);
        return res.status(500).json({message: "Server Error"});
        
    }
};

export const login = async (req,res)=> {
    const {email, password}= req.body;

    try {
        const user = await User.findOne({email});
        if(!user){
            return res.status(400).json({message: "Invalid credentials"});
        }

        const isPasswordcorrect = await bcrypt.compare(password, user.password);// compare plain text password with hashed password

        if(!isPasswordcorrect){
            return res.status(400).json({message: "Invalid credentials"});
        }

        generateToken(user._id, res)
        return res.status(200).json({
            _id: user._id,
            fullName: user.fullName,
            email: user.email,
            profilePic: user.profilePic,
        })
        
    } catch (error) {
        console.log("Error in login:", error.message);
        return res.status(500).json({message: "Server Error"});
        
    }


};

export const logout = (req,res)=> {
    try {
        res.cookie("jwt", "", {maxAge:0});
        return res.status(200).json({message:" Logged out successfully"});
    } catch (error) {
        console.log("Error in logout:", error.message);
        return res.status(500).json({message: "Server Error"});
        
    }
}

export const updateProfile = async (req, res)=>{

    try {
        const {profilePic} = req.body;
         const userId = req.user._id;

        if(!profilePic){
            return res.status(400).json({message: "Profile picture is required"});
        }

        const uploadResponse = await cloudinary.uploader.upload(profilePic) // Upload image to Cloudinary

        const updateUser = await User.findByIdAndUpdate(userId, {profilePic:uploadResponse.secure_url}, {new:true});// Update user profile picture in DB

        res.status(200).json(updateUser)
        
    } catch (error) {
        console.log("Error in updateProfile:", error.message);
        return res.status(500).json({message: "Server Error"});
        
    }
    
    
}
export const checkauth = (req, res) => {
    try {
        res.status(200).json({user:req.user}); //means if protectRoute middleware calls next() then req.user will be available here
    } catch (error) {
        console.log("Error in checkauth:", error.message);
        return res.status(500).json({message: "Server Error"});  
        
    }
}